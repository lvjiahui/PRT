#version 430 core
#define SIZE 256
// #define SIZE 128

layout(local_size_x = SIZE) in;

uniform int probe_xid;
uniform int probe_yid;
uniform int probe_zid;

uniform samplerCube environment;
// layout (rgba32f, binding = 0) uniform image3D output_SH0;
// layout (rgba32f, binding = 1) uniform image3D output_SH1;
// layout (rgba32f, binding = 2) uniform image3D output_SH2;
// layout (rgba32f, binding = 3) uniform image3D output_SH3;
// layout (rgba32f, binding = 4) uniform image3D output_SH4;
// layout (rgba32f, binding = 5) uniform image3D output_SH5;
// layout (rgba32f, binding = 6) uniform image3D output_SH6;
// layout (rgba32f, binding = 7) uniform image3D output_SH7;
// layout (rgba32f, binding = 8) uniform image3D output_SH8;
layout (rgba32f, binding = 0) uniform image3D SH_Ar;
layout (rgba32f, binding = 1) uniform image3D SH_Ag;
layout (rgba32f, binding = 2) uniform image3D SH_Ab;
layout (rgba32f, binding = 3) uniform image3D SH_Br;
layout (rgba32f, binding = 4) uniform image3D SH_Bg;
layout (rgba32f, binding = 5) uniform image3D SH_Bb;
layout (rgba32f, binding = 6) uniform image3D SH_C;
const float c1 = 0.429043, c2 = 0.511664, c3 = 0.743125, c4 = 0.886227, c5 = 0.247708;

const float PI = 3.14159265359;
const float sampleDelta = 2*PI/SIZE;

shared vec4 phi_irradiance[SIZE][9];

//An Efficient Representation for Irradiance Environment Maps
float SH00(const vec3 d) {
  return 0.282095;
}

float SH1n1(const vec3 d) {
  return 0.488603 * d.y;
}

float SH10(const vec3 d) {
  return 0.488603 * d.z;
}

float SH1p1(const vec3 d) {
  return 0.488603 * d.x;
}

float SH2n2(const vec3 d) {
  return 1.092548 * d.x * d.y;
}

float SH2n1(const vec3 d) {
  return 1.092548 * d.y * d.z;
}

float SH20(const vec3 d) {
  return 0.315392 * (3.0 * d.z * d.z - 1);
}

float SH2p1(const vec3 d) {
  return 1.092548 * d.x * d.z;
}

float SH2p2(const vec3 d) {
  return 0.546274 * (d.x * d.x - d.y * d.y);
}

void main()
{
    uint xid = gl_GlobalInvocationID.x;
    for(int i = 0; i < 9; i++)
        phi_irradiance[xid][i] = vec4(0,0,0,1);

    float phi = sampleDelta * xid;
    float sin_phi = sin(phi);
    float cos_phi = cos(phi);

    for(float theta = 0.0; theta < PI; theta += sampleDelta){
        float sin_theta = sin(theta);
        float cos_theta = cos(theta);
        // spherical to cartesian
        vec3 sampleVec = vec3(sin_theta * cos_phi,  sin_theta * sin_phi, cos_theta);
        vec4 radiance = vec4(texture(environment, sampleVec.yzx).rgb, 1) * sin_theta; //convert from directX to openGL
        phi_irradiance[xid][0].rgb += radiance.rgb * SH00(sampleVec) ;
        phi_irradiance[xid][1].rgb += radiance.rgb * SH1n1(sampleVec);
        phi_irradiance[xid][2].rgb += radiance.rgb * SH10(sampleVec) ;
        phi_irradiance[xid][3].rgb += radiance.rgb * SH1p1(sampleVec);
        phi_irradiance[xid][4].rgb += radiance.rgb * SH2n2(sampleVec);
        phi_irradiance[xid][5].rgb += radiance.rgb * SH2n1(sampleVec);
        phi_irradiance[xid][6].rgb += radiance.rgb * SH20(sampleVec) ;
        phi_irradiance[xid][7].rgb += radiance.rgb * SH2p1(sampleVec);
        phi_irradiance[xid][8].rgb += radiance.rgb * SH2p2(sampleVec);

        // phi_irradiance[xid][0].a += radiance.a;
        // phi_irradiance[xid][1].a += radiance.a;
        // phi_irradiance[xid][2].a += radiance.a;
        // phi_irradiance[xid][3].a += radiance.a;
        // phi_irradiance[xid][4].a += radiance.a;
        // phi_irradiance[xid][5].a += radiance.a;
        // phi_irradiance[xid][6].a += radiance.a;
        // phi_irradiance[xid][7].a += radiance.a;
        // phi_irradiance[xid][8].a += radiance.a;
    }

    barrier();

    // reduce
    for (uint s = SIZE/2; s>0; s>>=1) {
        if (xid < s) {
            phi_irradiance[xid][0] += phi_irradiance[xid + s][0];
            phi_irradiance[xid][1] += phi_irradiance[xid + s][1];
            phi_irradiance[xid][2] += phi_irradiance[xid + s][2];
            phi_irradiance[xid][3] += phi_irradiance[xid + s][3];
            phi_irradiance[xid][4] += phi_irradiance[xid + s][4];
            phi_irradiance[xid][5] += phi_irradiance[xid + s][5];
            phi_irradiance[xid][6] += phi_irradiance[xid + s][6];
            phi_irradiance[xid][7] += phi_irradiance[xid + s][7];
            phi_irradiance[xid][8] += phi_irradiance[xid + s][8];
        }
        barrier();
    }

    // output
    if (xid == 0){
        // imageStore(output_SH0, probe_id, phi_irradiance[0][0] * sampleDelta * sampleDelta);
        // imageStore(output_SH1, probe_id, phi_irradiance[0][1] * sampleDelta * sampleDelta);
        // imageStore(output_SH2, probe_id, phi_irradiance[0][2] * sampleDelta * sampleDelta);
        // imageStore(output_SH3, probe_id, phi_irradiance[0][3] * sampleDelta * sampleDelta);
        // imageStore(output_SH4, probe_id, phi_irradiance[0][4] * sampleDelta * sampleDelta);
        // imageStore(output_SH5, probe_id, phi_irradiance[0][5] * sampleDelta * sampleDelta);
        // imageStore(output_SH6, probe_id, phi_irradiance[0][6] * sampleDelta * sampleDelta);
        // imageStore(output_SH7, probe_id, phi_irradiance[0][7] * sampleDelta * sampleDelta);
        // imageStore(output_SH8, probe_id, phi_irradiance[0][8] * sampleDelta * sampleDelta);
        const ivec3 probe_id = ivec3(probe_xid, probe_yid, probe_zid);

        const vec3 L00 = phi_irradiance[0][0].rgb * sampleDelta * sampleDelta;
        const vec3 L1n1= phi_irradiance[0][1].rgb * sampleDelta * sampleDelta;
        const vec3 L10 = phi_irradiance[0][2].rgb * sampleDelta * sampleDelta;
        const vec3 L1p1= phi_irradiance[0][3].rgb * sampleDelta * sampleDelta;
        const vec3 L2n2= phi_irradiance[0][4].rgb * sampleDelta * sampleDelta;
        const vec3 L2n1= phi_irradiance[0][5].rgb * sampleDelta * sampleDelta;
        const vec3 L20 = phi_irradiance[0][6].rgb * sampleDelta * sampleDelta;
        const vec3 L2p1= phi_irradiance[0][7].rgb * sampleDelta * sampleDelta;
        const vec3 L2p2= phi_irradiance[0][8].rgb * sampleDelta * sampleDelta;
        // Linear + constant polynomial terms : 2c2 (L11x + L1−1y + L10z) + c4L00 − c5L20
        const vec3 SH_Ax = 2*c2*L1p1;
        const vec3 SH_Ay = 2*c2*L1n1;
        const vec3 SH_Az = 2*c2*L10;
        const vec3 SH_Aw = c4*L00 - c5*L20;
        imageStore(SH_Ar, probe_id, vec4(SH_Ax.r, SH_Ay.r, SH_Az.r, SH_Aw.r));
        imageStore(SH_Ag, probe_id, vec4(SH_Ax.g, SH_Ay.g, SH_Az.g, SH_Aw.g));
        imageStore(SH_Ab, probe_id, vec4(SH_Ax.b, SH_Ay.b, SH_Az.b, SH_Aw.b));
        // 4 of the quadratic polynomials : 2c1 (L2−2xy + L21xz + L2−1yz) +  c3L20z2
        const vec3 SH_Bxy = 2*c1*L2n2;
        const vec3 SH_Bxz = 2*c1*L2p1;
        const vec3 SH_Byz = 2*c1*L2n1;
        const vec3 SH_Bz2 = c3*L20;
        imageStore(SH_Br, probe_id, vec4(SH_Bxy.r, SH_Bxz.r, SH_Byz.r, SH_Bz2.r));
        imageStore(SH_Bg, probe_id, vec4(SH_Bxy.g, SH_Bxz.g, SH_Byz.g, SH_Bz2.g));
        imageStore(SH_Bb, probe_id, vec4(SH_Bxy.b, SH_Bxz.b, SH_Byz.b, SH_Bz2.b));
        // Final quadratic polynomial :  c1L22 (x2 - y2)
        imageStore(SH_C, probe_id, vec4(c1*L2p2, 1));
        
    }

}
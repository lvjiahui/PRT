#version 430 core

layout(local_size_x = 8, local_size_y = 8) in;

layout (rgba16f, binding = 0) uniform imageCube WorldPos;
layout (rgba16f, binding = 1) uniform imageCube Normal;
layout (rgba16f, binding = 2) uniform imageCube radiance;


struct CastLight {
    vec3 intensity;
    vec3 position;  
    vec3 direction;
    float cutOff;
};

struct PointLight {
    vec3 intensity;
    vec3 position;  
};

uniform CastLight light;
uniform PointLight ambient;

void main()
{
    ivec3 texCoord = ivec3(gl_GlobalInvocationID);
    vec3 rad = vec3(0, 0, 0);
    vec3 N = normalize(imageLoad(Normal, texCoord).rgb);
    vec3 pos = imageLoad(WorldPos, texCoord).rgb;

    // check if lighting is inside the spotlight cone
    vec3 lightDir = normalize(light.position - pos);
    float theta = dot(lightDir, normalize(-light.direction)); 
    if(theta > light.cutOff)
    {
        float incoming_cos = max(dot(lightDir, N),0);
        float dist = length(light.position - pos);
        rad = light.intensity * incoming_cos / (dist*dist);
    }
    //ambient
    float incoming_cos = max(dot(normalize(ambient.position - pos), N),0);
    float dist = length(ambient.position - pos);
    rad += ambient.intensity * incoming_cos / (dist*dist);

    imageStore(radiance, texCoord, vec4(rad,1));    
    
}
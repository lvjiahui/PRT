#version 430 core
#define SIZE 64

layout(local_size_x = 8, local_size_y = 8) in;

// pack to 2D texture
layout (rgba16f, binding = 0) uniform image2D precomp_SH0123;
layout (rgba16f, binding = 1) uniform image2D precomp_SH4567;
layout (rgba16f, binding = 2) uniform image2D precomp_SH8;


const float c1 = 0.429043, c2 = 0.511664, c3 = 0.743125, c4 = 0.886227, c5 = 0.247708;


//An Efficient Representation for Irradiance Environment Maps
float SH00(const vec3 d) {
  return 0.282095;
}

float SH1n1(const vec3 d) {
  return 0.488603 * d.y;
}

float SH10(const vec3 d) {
  return 0.488603 * d.z;
}

float SH1p1(const vec3 d) {
  return 0.488603 * d.x;
}

float SH2n2(const vec3 d) {
  return 1.092548 * d.x * d.y;
}

float SH2n1(const vec3 d) {
  return 1.092548 * d.y * d.z;
}

float SH20(const vec3 d) {
  return 0.315392 * (3.0 * d.z * d.z - 1);
}

float SH2p1(const vec3 d) {
  return 1.092548 * d.x * d.z;
}

float SH2p2(const vec3 d) {
  return 0.546274 * (d.x * d.x - d.y * d.y);
}

vec3 cubeCoordToWorld(ivec3 cubeCoord)
{
    vec2 texCoord = vec2(cubeCoord.xy) / SIZE;
    texCoord = texCoord  * 2.0 - 1.0; // -1..1
    switch(cubeCoord.z)
    {
        case 0: return vec3(1.0, -texCoord.yx); // posx
        case 1: return vec3(-1.0, -texCoord.y, texCoord.x); //negx
        case 2: return vec3(texCoord.x, 1.0, texCoord.y); // posy
        case 3: return vec3(texCoord.x, -1.0, -texCoord.y); //negy
        case 4: return vec3(texCoord.x, -texCoord.y, 1.0); // posz
        case 5: return vec3(-texCoord.xy, -1.0); // negz
    }
    return vec3(0.0);
}

void main()
{
    const ivec3 cubeCoord = ivec3(gl_GlobalInvocationID); //[8x8, 8x8, 6]
    const ivec2 imageCoord = ivec2(SIZE * cubeCoord.z + cubeCoord.x, cubeCoord.y);
    const uint tex_V = gl_LocalInvocationID.y;

    const vec3 cubepos = cubeCoordToWorld(cubeCoord);
    const vec3 worldpos = cubepos.zxy; // openGL to directX
    const vec3 N = normalize(worldpos);
    float fTmp = dot(worldpos, worldpos);
    float fWt = sqrt(fTmp)*fTmp;

    imageStore(precomp_SH0123, imageCoord, fWt * vec4(SH00(N), SH1n1(N), SH10(N), SH1p1(N)));
    imageStore(precomp_SH4567, imageCoord, fWt * vec4(SH2n2(N), SH2n1(N), SH20(N), SH2p1(N)));
    imageStore(precomp_SH8, imageCoord, fWt * vec4(SH2p2(N), 0, 0, 0));

}
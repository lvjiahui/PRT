#version 430 core

layout(local_size_x = 8, local_size_y = 8) in;

layout (rgba16f, binding = 0) uniform imageCube WorldPos;
layout (rgba16f, binding = 1) uniform imageCube Normal;
layout (rgba16f, binding = 2) uniform imageCube radiance;


#include common/light.glsl
uniform CastLight light;
uniform PointLight ambient;

#include common/SH.glsl
uniform bool multi_bounce;
uniform float atten;

#include colored_wall.glsl

void main()
{
    ivec3 texCoord = ivec3(gl_GlobalInvocationID);
    vec3 rad = vec3(0, 0, 0);
    vec3 N = normalize(imageLoad(Normal, texCoord).rgb);
    vec3 pos = imageLoad(WorldPos, texCoord).rgb;


    rad += Eval_CastLight(light, pos, N);
    rad += Eval_PointLight(ambient, pos, N);
    if(multi_bounce){
        rad += atten * SH_Irad(vec4(N,1), pos) / PI;
    }

    vec3 albedo = get_albedo(pos);
    rad *= albedo;

    imageStore(radiance, texCoord, vec4(rad,1));    
    
}